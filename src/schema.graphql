type Contact {
  id: ID!
  name: String
  email: String
}

type ContactConnection {
  edges: [ContactEdge]
  pageInfo: PageInfo
}

type ContactEdge {
  cursor: Cursor
  node: Contact
}

input ContactInput {
  _id: ID
  name: String
  email: String
}

type ContactPayload {
  contactEdge: ContactEdge
}

scalar Cursor

type Mutation {
  createContact(input: ContactInput!): ContactPayload
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  text: String
  author: String
}

type PostConnection {
  edges: [PostEdge]
  pageInfo: PageInfo
}

type PostEdge {
  cursor: Cursor
  node: Post
}

type Query {
  viewer: Viewer
}

type Viewer {
  id: ID!
  allContacts(first: Int, last: Int): ContactConnection
  allPosts(first: Int, last: Int): PostConnection
}
